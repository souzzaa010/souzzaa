{"version":3,"names":["React","render","MaskedText","describe","test","container","expect","getByText","toBeTruthy","toMatchSnapshot","prefix","decimalSeparator","groupSeparator","precision","toHaveStyle","fontWeight","fontStyle","textDecorationLine"],"sources":["MaskedText.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react-native';\nimport { MaskedText } from './MaskedText';\n\ndescribe('<MaskedText />', () => {\n  test('should renders correctly with custom mask', () => {\n    const container = render(<MaskedText mask=\"AAA-999\">RCT777</MaskedText>);\n\n    expect(container.getByText('RCT-777')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedText\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n      >\n        5999\n      </MaskedText>\n    );\n\n    expect(container.getByText('$59.99')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n  test('should be bold when the textBold attribute is added', () => {\n    const container  =\n    render(<MaskedText textBold mask=\"99/99/9999\">\n        30081990\n      </MaskedText>)\n      expect(container.getByText('30/08/1990')).toHaveStyle({fontWeight: 'bold' });\n    });\n    test('should be italic when the textItalic attribute is added', () => {\n      const container  =\n      render(<MaskedText textItalic mask=\"99/99/9999\">\n          30081990\n        </MaskedText>)\n        expect(container.getByText('30/08/1990')).toHaveStyle({fontStyle: 'italic' });\n    });\n    test('should be the line style added to the text when the textDecoration attribute has a non-null value', () => {\n      const textDecorationLine = 'underline'\n      const container  =\n      render(<MaskedText textDecoration={textDecorationLine} mask=\"99/99/9999\">\n          30081990\n        </MaskedText>)\n        expect(container.getByText('30/08/1990')).toHaveStyle({textDecorationLine: textDecorationLine });\n    });    \n})\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;EAC/BC,IAAI,CAAC,2CAAD,EAA8C,MAAM;IACtD,MAAMC,SAAS,GAAGJ,MAAM,eAAC,oBAAC,UAAD;MAAY,IAAI,EAAC;IAAjB,YAAD,CAAxB;IAEAK,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,SAApB,CAAD,CAAN,CAAuCC,UAAvC;IAEAF,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;EACD,CANG,CAAJ;EAQAL,IAAI,CAAC,6CAAD,EAAgD,MAAM;IACxD,MAAMC,SAAS,GAAGJ,MAAM,eACtB,oBAAC,UAAD;MACE,IAAI,EAAC,UADP;MAEE,OAAO,EAAE;QACPS,MAAM,EAAE,GADD;QAEPC,gBAAgB,EAAE,GAFX;QAGPC,cAAc,EAAE,GAHT;QAIPC,SAAS,EAAE;MAJJ;IAFX,UADsB,CAAxB;IAcAP,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,QAApB,CAAD,CAAN,CAAsCC,UAAtC;IAEAF,MAAM,CAACD,SAAD,CAAN,CAAkBI,eAAlB;EACD,CAlBG,CAAJ;EAmBAL,IAAI,CAAC,qDAAD,EAAwD,MAAM;IAChE,MAAMC,SAAS,GACfJ,MAAM,eAAC,oBAAC,UAAD;MAAY,QAAQ,MAApB;MAAqB,IAAI,EAAC;IAA1B,cAAD,CADN;IAIEK,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,YAApB,CAAD,CAAN,CAA0CO,WAA1C,CAAsD;MAACC,UAAU,EAAE;IAAb,CAAtD;EACD,CANC,CAAJ;EAOEX,IAAI,CAAC,yDAAD,EAA4D,MAAM;IACpE,MAAMC,SAAS,GACfJ,MAAM,eAAC,oBAAC,UAAD;MAAY,UAAU,MAAtB;MAAuB,IAAI,EAAC;IAA5B,cAAD,CADN;IAIEK,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,YAApB,CAAD,CAAN,CAA0CO,WAA1C,CAAsD;MAACE,SAAS,EAAE;IAAZ,CAAtD;EACH,CANG,CAAJ;EAOAZ,IAAI,CAAC,mGAAD,EAAsG,MAAM;IAC9G,MAAMa,kBAAkB,GAAG,WAA3B;IACA,MAAMZ,SAAS,GACfJ,MAAM,eAAC,oBAAC,UAAD;MAAY,cAAc,EAAEgB,kBAA5B;MAAgD,IAAI,EAAC;IAArD,cAAD,CADN;IAIEX,MAAM,CAACD,SAAS,CAACE,SAAV,CAAoB,YAApB,CAAD,CAAN,CAA0CO,WAA1C,CAAsD;MAACG,kBAAkB,EAAEA;IAArB,CAAtD;EACH,CAPG,CAAJ;AAQH,CAlDO,CAAR"}