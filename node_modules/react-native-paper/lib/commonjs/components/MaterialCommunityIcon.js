"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.accessibilityProps = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _colors = require("../styles/themes/v2/colors");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const accessibilityProps = _reactNative.Platform.OS === 'web' ? {
  role: 'img',
  focusable: false
} : {
  accessibilityElementsHidden: true,
  importantForAccessibility: 'no-hide-descendants'
};

/**
 * Loads the appropriate icon module based on available dependencies
 */
exports.accessibilityProps = accessibilityProps;
const loadIconModule = () => {
  try {
    return require('@expo/vector-icons/MaterialCommunityIcons').default;
  } catch (e) {
    try {
      return require('@react-native-vector-icons/material-design-icons').default;
    } catch (e) {
      try {
        return require('react-native-vector-icons/MaterialCommunityIcons').default;
      } catch (e) {
        return null;
      }
    }
  }
};
const IconModule = loadIconModule();

/**
 * Fallback component displayed when no icon library is available
 */
const FallbackIcon = _ref => {
  let {
    name,
    color,
    size,
    ...rest
  } = _ref;
  console.warn(`Tried to use the icon '${name}' in a component from 'react-native-paper', but none of the required icon libraries are installed.`, `To fix this, please install one of the following:\n` + `- @expo/vector-icons\n` + `- @react-native-vector-icons/material-design-icons\n` + `- react-native-vector-icons\n\n` + `You can also use another method to specify icon: https://callstack.github.io/react-native-paper/docs/guides/icons`);
  return /*#__PURE__*/React.createElement(_reactNative.Text, _extends({}, rest, {
    style: [styles.icon, {
      color,
      fontSize: size
    }],
    selectable: false
  }), "\u25A1");
};
const MaterialCommunityIcons = IconModule || FallbackIcon;

/**
 * Default icon component that handles icon rendering with proper styling and accessibility
 */
const DefaultIcon = _ref2 => {
  let {
    name,
    color = _colors.black,
    size,
    direction,
    allowFontScaling,
    testID
  } = _ref2;
  return /*#__PURE__*/React.createElement(MaterialCommunityIcons, _extends({
    allowFontScaling: allowFontScaling,
    name: name,
    color: color,
    size: size,
    style: [{
      transform: [{
        scaleX: direction === 'rtl' ? -1 : 1
      }],
      lineHeight: size
    }, styles.icon],
    pointerEvents: "none",
    selectable: false,
    testID: testID
  }, accessibilityProps));
};
const styles = _reactNative.StyleSheet.create({
  // eslint-disable-next-line react-native/no-color-literals
  icon: {
    backgroundColor: 'transparent'
  }
});
var _default = DefaultIcon;
exports.default = _default;
//# sourceMappingURL=MaterialCommunityIcon.js.map